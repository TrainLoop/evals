"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8167],{225:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"development/testing","title":"Testing Guide","description":"This guide covers the comprehensive testing framework used in TrainLoop Evals, including test categories, execution methods, and best practices.","source":"@site/docs/development/testing.md","sourceDirName":"development","slug":"/development/testing","permalink":"/development/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/trainloop/evals/tree/main/docs/docs/development/testing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Pull Request Process","permalink":"/development/pull-request-process"}}');var i=n(4848),r=n(8453);const l={},a="Testing Guide",o={},c=[{value:"Test Framework Overview",id:"test-framework-overview",level:2},{value:"Test Categories",id:"test-categories",level:2},{value:"Core Test Markers",id:"core-test-markers",level:3},{value:"Test Configuration",id:"test-configuration",level:3},{value:"Running Tests",id:"running-tests",level:2},{value:"Quick Test Commands",id:"quick-test-commands",level:3},{value:"Using pytest Directly",id:"using-pytest-directly",level:3},{value:"Component-Specific Testing",id:"component-specific-testing",level:2},{value:"CLI Testing",id:"cli-testing",level:3},{value:"Test Structure",id:"test-structure",level:4},{value:"Running CLI Tests",id:"running-cli-tests",level:4},{value:"CLI Test Examples",id:"cli-test-examples",level:4},{value:"SDK Testing",id:"sdk-testing",level:3},{value:"Python SDK Testing",id:"python-sdk-testing",level:4},{value:"Python SDK Test Structure",id:"python-sdk-test-structure",level:4},{value:"TypeScript SDK Testing",id:"typescript-sdk-testing",level:4},{value:"Go SDK Testing",id:"go-sdk-testing",level:4},{value:"Test Execution Strategies",id:"test-execution-strategies",level:2},{value:"Parallel Testing",id:"parallel-testing",level:3},{value:"Test Filtering",id:"test-filtering",level:3},{value:"Test Output Control",id:"test-output-control",level:3},{value:"Integration Testing",id:"integration-testing",level:2},{value:"LLM Provider Integration",id:"llm-provider-integration",level:3},{value:"Environment Setup for Integration Tests",id:"environment-setup-for-integration-tests",level:3},{value:"Integration Test Categories",id:"integration-test-categories",level:3},{value:"Performance Testing",id:"performance-testing",level:2},{value:"Load Testing",id:"load-testing",level:3},{value:"Benchmark Testing",id:"benchmark-testing",level:3},{value:"Test Data Management",id:"test-data-management",level:2},{value:"Test Fixtures",id:"test-fixtures",level:3},{value:"Test Data Files",id:"test-data-files",level:3},{value:"Continuous Integration Testing",id:"continuous-integration-testing",level:2},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:3},{value:"Test Reporting",id:"test-reporting",level:3},{value:"Test Debugging",id:"test-debugging",level:2},{value:"Debugging Failed Tests",id:"debugging-failed-tests",level:3},{value:"Test Isolation",id:"test-isolation",level:3},{value:"Mock and Fixture Management",id:"mock-and-fixture-management",level:2},{value:"Common Mock Patterns",id:"common-mock-patterns",level:3},{value:"Preventing MagicMock Directory Creation",id:"preventing-magicmock-directory-creation",level:3},{value:"Cleanup Tasks",id:"cleanup-tasks",level:3},{value:"Writing New Tests",id:"writing-new-tests",level:2},{value:"Test Structure Guidelines",id:"test-structure-guidelines",level:3},{value:"Test Naming Conventions",id:"test-naming-conventions",level:3},{value:"Assertion Best Practices",id:"assertion-best-practices",level:3},{value:"Test Maintenance",id:"test-maintenance",level:2},{value:"Regular Test Maintenance",id:"regular-test-maintenance",level:3},{value:"Test Performance Optimization",id:"test-performance-optimization",level:3},{value:"Troubleshooting Common Issues",id:"troubleshooting-common-issues",level:2},{value:"Test Environment Issues",id:"test-environment-issues",level:3},{value:"API Key Issues",id:"api-key-issues",level:3},{value:"Dependency Issues",id:"dependency-issues",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Test Organization",id:"test-organization",level:3},{value:"Test Data",id:"test-data",level:3},{value:"Test Performance",id:"test-performance",level:3},{value:"Test Coverage",id:"test-coverage",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"testing-guide",children:"Testing Guide"})}),"\n",(0,i.jsx)(t.p,{children:"This guide covers the comprehensive testing framework used in TrainLoop Evals, including test categories, execution methods, and best practices."}),"\n",(0,i.jsx)(t.h2,{id:"test-framework-overview",children:"Test Framework Overview"}),"\n",(0,i.jsx)(t.p,{children:"TrainLoop Evals uses a multi-layered testing approach:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Unit Tests"})," - Fast, isolated tests for individual functions"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Integration Tests"})," - Component interaction tests"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"End-to-End Tests"})," - Complete user workflow tests"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Performance Tests"})," - Load and benchmark tests"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"SDK Integration Tests"})," - Cross-language SDK compatibility"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"test-categories",children:"Test Categories"}),"\n",(0,i.jsx)(t.p,{children:"The test suite is organized using pytest markers for categorization:"}),"\n",(0,i.jsx)(t.h3,{id:"core-test-markers",children:"Core Test Markers"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@pytest.mark.unit"})," - Fast unit tests"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@pytest.mark.integration"})," - End-to-end integration tests"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@pytest.mark.slow"})," - Tests that take longer to run"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@pytest.mark.judge"})," - Tests involving LLM judge functionality"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@pytest.mark.cli"})," - Tests for CLI commands"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@pytest.mark.scaffold"})," - Tests for scaffold template functionality"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@pytest.mark.registry"})," - Tests for registry components"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@pytest.mark.benchmark"})," - Tests for benchmark functionality"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"test-configuration",children:"Test Configuration"}),"\n",(0,i.jsxs)(t.p,{children:["Test configuration is defined in ",(0,i.jsx)(t.code,{children:"pytest.ini"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ini",children:"[pytest]\ntestpaths = tests,sdk\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\n\nmarkers =\n    unit: Fast unit tests\n    integration: End-to-end integration tests\n    slow: Tests that take longer to run\n    judge: Tests that involve LLM judge functionality\n    cli: Tests for CLI commands\n    scaffold: Tests for scaffold template functionality\n    registry: Tests for registry components\n    benchmark: Tests for benchmark functionality\n\naddopts = \n    -v\n    --tb=short\n    --strict-markers\n"})}),"\n",(0,i.jsx)(t.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(t.h3,{id:"quick-test-commands",children:"Quick Test Commands"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run all tests\ntask test\n\n# Run simplified tests (recommended for limited disk space)\ntask test:simple\n\n# Run component-specific tests\ntask test:cli      # CLI tests only\ntask test:sdk      # SDK tests only\n"})}),"\n",(0,i.jsx)(t.h3,{id:"using-pytest-directly",children:"Using pytest Directly"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run all tests\npytest\n\n# Run specific test categories\npytest -m unit          # Fast unit tests\npytest -m integration   # Integration tests\npytest -m cli           # CLI command tests\npytest -m judge         # LLM judge functionality\n\n# Run specific test files\npytest tests/test_cli.py\npytest tests/unit/test_config_utils.py\n"})}),"\n",(0,i.jsx)(t.h2,{id:"component-specific-testing",children:"Component-Specific Testing"}),"\n",(0,i.jsx)(t.h3,{id:"cli-testing",children:"CLI Testing"}),"\n",(0,i.jsx)(t.h4,{id:"test-structure",children:"Test Structure"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"tests/\n\u251c\u2500\u2500 unit/                   # Unit tests\n\u2502   \u251c\u2500\u2500 test_config_utils.py\n\u2502   \u2514\u2500\u2500 judge/\n\u2502       \u2514\u2500\u2500 test_judge_basic.py\n\u251c\u2500\u2500 integration/            # Integration tests\n\u2502   \u2514\u2500\u2500 init_flow/\n\u2502       \u2514\u2500\u2500 test_init_command.py\n\u251c\u2500\u2500 helpers/               # Test utilities\n\u2502   \u2514\u2500\u2500 mock_llm.py\n\u2514\u2500\u2500 conftest.py           # Test configuration\n"})}),"\n",(0,i.jsx)(t.h4,{id:"running-cli-tests",children:"Running CLI Tests"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"cd cli\n\n# Run all CLI tests\npoetry run pytest\n\n# Run specific test categories\npoetry run pytest -m unit\npoetry run pytest -m integration\npoetry run pytest -m cli\n\n# Run with verbose output\npoetry run pytest -v\n\n# Run specific test file\npoetry run pytest ../tests/unit/test_config_utils.py\n"})}),"\n",(0,i.jsx)(t.h4,{id:"cli-test-examples",children:"CLI Test Examples"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# tests/unit/test_config_utils.py\nimport pytest\nfrom trainloop_cli.commands.utils import load_config\n\nclass TestConfigUtils:\n    def test_load_config_with_valid_file(self):\n        """Test loading a valid configuration file."""\n        config = load_config("valid_config.yaml")\n        assert config is not None\n        assert "data_folder" in config\n    \n    @pytest.mark.cli\n    def test_cli_command_execution(self):\n        """Test CLI command execution."""\n        result = subprocess.run(["trainloop", "--version"], capture_output=True)\n        assert result.returncode == 0\n'})}),"\n",(0,i.jsx)(t.h3,{id:"sdk-testing",children:"SDK Testing"}),"\n",(0,i.jsx)(t.h4,{id:"python-sdk-testing",children:"Python SDK Testing"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"cd sdk/python\n\n# Run all SDK tests\npoetry run pytest\n\n# Run unit tests only\npoetry run pytest -m unit\n\n# Run integration tests (requires API keys)\npoetry run pytest -m integration\n\n# Run specific test categories\npoetry run pytest tests/unit/test_store.py\npoetry run pytest tests/integration/test_openai_sdk.py\n"})}),"\n",(0,i.jsx)(t.h4,{id:"python-sdk-test-structure",children:"Python SDK Test Structure"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"sdk/python/tests/\n\u251c\u2500\u2500 unit/                     # Unit tests\n\u2502   \u251c\u2500\u2500 test_config.py\n\u2502   \u251c\u2500\u2500 test_store.py\n\u2502   \u251c\u2500\u2500 test_logger.py\n\u2502   \u2514\u2500\u2500 test_fsspec_store.py\n\u251c\u2500\u2500 integration/              # Integration tests\n\u2502   \u251c\u2500\u2500 test_openai_sdk.py\n\u2502   \u251c\u2500\u2500 test_anthropic_sdk.py\n\u2502   \u251c\u2500\u2500 test_langchain.py\n\u2502   \u2514\u2500\u2500 test_litellm.py\n\u251c\u2500\u2500 edge_cases/              # Edge case tests\n\u2514\u2500\u2500 conftest.py              # Test configuration\n"})}),"\n",(0,i.jsx)(t.h4,{id:"typescript-sdk-testing",children:"TypeScript SDK Testing"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'cd sdk/typescript\n\n# Run all tests\nnpm test\n\n# Run with coverage\nnpm run test:coverage\n\n# Run specific test files\nnpm test -- --testNamePattern="config"\nnpm test -- tests/unit/store.test.ts\n'})}),"\n",(0,i.jsx)(t.h4,{id:"go-sdk-testing",children:"Go SDK Testing"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"cd sdk/go/trainloop-llm-logging\n\n# Run all tests\ngo test ./...\n\n# Run with coverage\ngo test -cover ./...\n\n# Run specific packages\ngo test ./internal/config\ngo test ./instrumentation\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-execution-strategies",children:"Test Execution Strategies"}),"\n",(0,i.jsx)(t.h3,{id:"parallel-testing",children:"Parallel Testing"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run tests in parallel (pytest-xdist)\npytest -n auto\n\n# Run with specific number of workers\npytest -n 4\n"})}),"\n",(0,i.jsx)(t.h3,{id:"test-filtering",children:"Test Filtering"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'# Run tests matching pattern\npytest -k "test_config"\n\n# Run tests not matching pattern\npytest -k "not slow"\n\n# Combine filters\npytest -k "config and not integration"\n'})}),"\n",(0,i.jsx)(t.h3,{id:"test-output-control",children:"Test Output Control"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Minimal output\npytest -q\n\n# Verbose output\npytest -v\n\n# Show local variables in failures\npytest -l\n\n# Show full traceback\npytest --tb=long\n"})}),"\n",(0,i.jsx)(t.h2,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,i.jsx)(t.h3,{id:"llm-provider-integration",children:"LLM Provider Integration"}),"\n",(0,i.jsx)(t.p,{children:"Integration tests verify SDK compatibility with real LLM providers:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# tests/integration/test_openai_sdk.py\nimport pytest\nfrom openai import OpenAI\nfrom trainloop_llm_logging import collect\n\n@pytest.mark.integration\ndef test_openai_chat_completion():\n    """Test OpenAI chat completion integration."""\n    collect()\n    \n    client = OpenAI()\n    response = client.chat.completions.create(\n        model="gpt-3.5-turbo",\n        messages=[{"role": "user", "content": "Hello"}]\n    )\n    \n    assert response.choices[0].message.content\n    # Verify logging occurred\n    assert os.path.exists("./data/events")\n'})}),"\n",(0,i.jsx)(t.h3,{id:"environment-setup-for-integration-tests",children:"Environment Setup for Integration Tests"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Set up API keys for integration tests\nexport OPENAI_API_KEY=your_key_here\nexport ANTHROPIC_API_KEY=your_key_here\nexport GEMINI_API_KEY=your_key_here\n\n# Run integration tests\npytest -m integration\n"})}),"\n",(0,i.jsx)(t.h3,{id:"integration-test-categories",children:"Integration Test Categories"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# HTTP client integration\ntask test:sdk:integration:http\n\n# OpenAI SDK integration\ntask test:sdk:integration:openai\n\n# Anthropic SDK integration\ntask test:sdk:integration:anthropic\n\n# LangChain integration\ntask test:sdk:integration:langchain\n\n# LiteLLM integration\ntask test:sdk:integration:litellm\n"})}),"\n",(0,i.jsx)(t.h2,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,i.jsx)(t.h3,{id:"load-testing",children:"Load Testing"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run performance tests\npytest -m slow\n\n# Run with profiling\npytest --profile\n\n# Run load tests\npytest tests/performance/test_load.py\n"})}),"\n",(0,i.jsx)(t.h3,{id:"benchmark-testing",children:"Benchmark Testing"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'# Run benchmark tests\npytest -m benchmark\n\n# Run CLI benchmark command tests\npytest -m benchmark -k "benchmark"\n'})}),"\n",(0,i.jsx)(t.h2,{id:"test-data-management",children:"Test Data Management"}),"\n",(0,i.jsx)(t.h3,{id:"test-fixtures",children:"Test Fixtures"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# conftest.py\nimport pytest\nimport tempfile\nfrom pathlib import Path\n\n@pytest.fixture\ndef temp_data_dir():\n    """Create temporary data directory for tests."""\n    with tempfile.TemporaryDirectory() as tmp_dir:\n        yield Path(tmp_dir)\n\n@pytest.fixture\ndef mock_llm_response():\n    """Mock LLM response for testing."""\n    return {\n        "choices": [{"message": {"content": "Test response"}}],\n        "usage": {"prompt_tokens": 10, "completion_tokens": 20}\n    }\n'})}),"\n",(0,i.jsx)(t.h3,{id:"test-data-files",children:"Test Data Files"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"tests/fixtures/\n\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 valid_config.yaml\n\u2502   \u2514\u2500\u2500 invalid_config.yaml\n\u251c\u2500\u2500 events/\n\u2502   \u251c\u2500\u2500 sample_events.jsonl\n\u2502   \u2514\u2500\u2500 benchmark_events.jsonl\n\u2514\u2500\u2500 responses/\n    \u251c\u2500\u2500 openai_response.json\n    \u2514\u2500\u2500 anthropic_response.json\n"})}),"\n",(0,i.jsx)(t.h2,{id:"continuous-integration-testing",children:"Continuous Integration Testing"}),"\n",(0,i.jsx)(t.h3,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"name: Test Suite\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.9, '3.10', '3.11']\n    \n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      \n      - name: Install dependencies\n        run: |\n          cd cli && poetry install\n          cd ../sdk/python && poetry install\n      \n      - name: Run tests\n        run: task test:simple\n"})}),"\n",(0,i.jsx)(t.h3,{id:"test-reporting",children:"Test Reporting"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Generate test coverage report\npytest --cov=trainloop_cli --cov-report=html\n\n# Generate JUnit XML report\npytest --junitxml=test-results.xml\n\n# Generate comprehensive report\npytest --cov=trainloop_cli --cov-report=html --cov-report=term --junitxml=test-results.xml\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-debugging",children:"Test Debugging"}),"\n",(0,i.jsx)(t.h3,{id:"debugging-failed-tests",children:"Debugging Failed Tests"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run with debugger\npytest --pdb\n\n# Run with verbose output and local variables\npytest -vvv -l\n\n# Run specific failing test\npytest tests/unit/test_config.py::TestConfig::test_load_config -vvv\n"})}),"\n",(0,i.jsx)(t.h3,{id:"test-isolation",children:"Test Isolation"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run tests in isolation\npytest --forked\n\n# Run with clean environment\npytest --cache-clear\n\n# Run with specific temporary directory\npytest --basetemp=/tmp/pytest-custom\n"})}),"\n",(0,i.jsx)(t.h2,{id:"mock-and-fixture-management",children:"Mock and Fixture Management"}),"\n",(0,i.jsx)(t.h3,{id:"common-mock-patterns",children:"Common Mock Patterns"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from unittest.mock import patch, MagicMock\n\n@patch(\'trainloop_llm_logging.store.Path\')\ndef test_store_with_mock_filesystem(mock_path):\n    """Test store functionality with mocked filesystem."""\n    mock_path.return_value.exists.return_value = True\n    \n    # Test logic here\n    assert store.save_data(data) is True\n'})}),"\n",(0,i.jsx)(t.h3,{id:"preventing-magicmock-directory-creation",children:"Preventing MagicMock Directory Creation"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# Good: Properly configure mocks\n@patch('pathlib.Path')\ndef test_path_operations(mock_path):\n    mock_path.return_value.mkdir.return_value = None\n    mock_path.return_value.exists.return_value = True\n    \n    # Test logic\n"})}),"\n",(0,i.jsx)(t.h3,{id:"cleanup-tasks",children:"Cleanup Tasks"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Clean up MagicMock directories\ntask clean:mocks\n\n# Check for MagicMock directories\ntask check:mocks\n\n# Clean all test artifacts\ntask clean:all\n"})}),"\n",(0,i.jsx)(t.h2,{id:"writing-new-tests",children:"Writing New Tests"}),"\n",(0,i.jsx)(t.h3,{id:"test-structure-guidelines",children:"Test Structure Guidelines"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'class TestComponentName:\n    """Test suite for ComponentName."""\n    \n    def setup_method(self):\n        """Set up test fixtures."""\n        self.component = ComponentName()\n    \n    def test_basic_functionality(self):\n        """Test basic component functionality."""\n        result = self.component.do_something()\n        assert result == expected_value\n    \n    @pytest.mark.integration\n    def test_integration_scenario(self):\n        """Test integration with external services."""\n        # Integration test logic\n        pass\n    \n    @pytest.mark.slow\n    def test_performance_scenario(self):\n        """Test performance characteristics."""\n        # Performance test logic\n        pass\n'})}),"\n",(0,i.jsx)(t.h3,{id:"test-naming-conventions",children:"Test Naming Conventions"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Use descriptive test names: ",(0,i.jsx)(t.code,{children:"test_save_config_creates_file"})]}),"\n",(0,i.jsxs)(t.li,{children:["Group related tests in classes: ",(0,i.jsx)(t.code,{children:"TestConfigManager"})]}),"\n",(0,i.jsxs)(t.li,{children:["Use appropriate markers: ",(0,i.jsx)(t.code,{children:"@pytest.mark.unit"})]}),"\n",(0,i.jsx)(t.li,{children:"Include docstrings for complex tests"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"assertion-best-practices",children:"Assertion Best Practices"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# Good: Specific assertions\nassert response.status_code == 200\nassert len(results) == 3\nassert "expected_key" in response_data\n\n# Better: Use pytest helpers\npytest.approx(actual_value, expected_value, rel=1e-3)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"test-maintenance",children:"Test Maintenance"}),"\n",(0,i.jsx)(t.h3,{id:"regular-test-maintenance",children:"Regular Test Maintenance"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run tests frequently during development\npytest -x  # Stop on first failure\n\n# Update test dependencies\ncd cli && poetry update\ncd ../sdk/python && poetry update\n"})}),"\n",(0,i.jsx)(t.h3,{id:"test-performance-optimization",children:"Test Performance Optimization"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'# Profile test execution\npytest --durations=10\n\n# Identify slow tests\npytest --durations=0 | grep -E "slow|SLOW"\n'})}),"\n",(0,i.jsx)(t.h2,{id:"troubleshooting-common-issues",children:"Troubleshooting Common Issues"}),"\n",(0,i.jsx)(t.h3,{id:"test-environment-issues",children:"Test Environment Issues"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Clear pytest cache\npytest --cache-clear\n\n# Reset test environment\ntask clean:all\n"})}),"\n",(0,i.jsx)(t.h3,{id:"api-key-issues",children:"API Key Issues"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'# Check API key configuration\necho $OPENAI_API_KEY\n\n# Skip integration tests without API keys\npytest -m "not integration"\n'})}),"\n",(0,i.jsx)(t.h3,{id:"dependency-issues",children:"Dependency Issues"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Reinstall test dependencies\npoetry install --no-cache\n\n# Check for conflicting dependencies\npoetry check\n"})}),"\n",(0,i.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(t.h3,{id:"test-organization",children:"Test Organization"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Keep tests close to the code they test"}),"\n",(0,i.jsx)(t.li,{children:"Use clear, descriptive test names"}),"\n",(0,i.jsx)(t.li,{children:"Group related tests in classes"}),"\n",(0,i.jsx)(t.li,{children:"Use appropriate test markers"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"test-data",children:"Test Data"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Use fixtures for reusable test data"}),"\n",(0,i.jsx)(t.li,{children:"Keep test data minimal and focused"}),"\n",(0,i.jsx)(t.li,{children:"Use factory patterns for complex test objects"}),"\n",(0,i.jsx)(t.li,{children:"Clean up test data after tests"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"test-performance",children:"Test Performance"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Keep unit tests fast (< 100ms each)"}),"\n",(0,i.jsx)(t.li,{children:"Use mocks for external dependencies"}),"\n",(0,i.jsx)(t.li,{children:"Run integration tests separately"}),"\n",(0,i.jsx)(t.li,{children:"Profile slow tests regularly"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"test-coverage",children:"Test Coverage"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Aim for high test coverage (>90%)"}),"\n",(0,i.jsx)(t.li,{children:"Focus on critical paths and edge cases"}),"\n",(0,i.jsx)(t.li,{children:"Use coverage reports to identify gaps"}),"\n",(0,i.jsx)(t.li,{children:"Don't sacrifice test quality for coverage"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Review the ",(0,i.jsx)(t.a,{href:"/development/local-development",children:"Local Development"})," guide for test setup"]}),"\n",(0,i.jsxs)(t.li,{children:["Check the ",(0,i.jsx)(t.a,{href:"/development/building-from-source",children:"Building from Source"})," guide for build testing"]}),"\n",(0,i.jsxs)(t.li,{children:["See the ",(0,i.jsx)(t.a,{href:"/development/code-style",children:"Code Style"})," guide for test code standards"]}),"\n",(0,i.jsxs)(t.li,{children:["Follow the ",(0,i.jsx)(t.a,{href:"/development/pull-request-process",children:"Pull Request Process"})," for test requirements"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function l(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);