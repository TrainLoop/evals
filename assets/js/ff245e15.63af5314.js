"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2009],{2005:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"development/pull-request-process","title":"Pull Request Process","description":"This guide covers the complete pull request workflow for contributing to TrainLoop Evals, from preparation to merge.","source":"@site/docs/development/pull-request-process.md","sourceDirName":"development","slug":"/development/pull-request-process","permalink":"/development/pull-request-process","draft":false,"unlisted":false,"editUrl":"https://github.com/trainloop/evals/tree/main/docs/docs/development/pull-request-process.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Local Development","permalink":"/development/local-development"},"next":{"title":"Testing Guide","permalink":"/development/testing"}}');var t=s(4848),r=s(8453);const l={},c="Pull Request Process",o={},a=[{value:"Overview",id:"overview",level:2},{value:"Before You Start",id:"before-you-start",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Choose Your Contribution Type",id:"choose-your-contribution-type",level:3},{value:"Step 1: Planning",id:"step-1-planning",level:2},{value:"For Bug Fixes",id:"for-bug-fixes",level:3},{value:"For New Features",id:"for-new-features",level:3},{value:"For Documentation",id:"for-documentation",level:3},{value:"Step 2: Preparation",id:"step-2-preparation",level:2},{value:"Create a Feature Branch",id:"create-a-feature-branch",level:3},{value:"Branch Naming Conventions",id:"branch-naming-conventions",level:3},{value:"Step 3: Development",id:"step-3-development",level:2},{value:"Code Quality Checklist",id:"code-quality-checklist",level:3},{value:"Testing Requirements",id:"testing-requirements",level:3},{value:"Documentation Updates",id:"documentation-updates",level:3},{value:"Step 4: Commit Your Changes",id:"step-4-commit-your-changes",level:2},{value:"Commit Message Format",id:"commit-message-format",level:3},{value:"Types",id:"types",level:4},{value:"Scopes",id:"scopes",level:4},{value:"Examples",id:"examples",level:4},{value:"Commit Best Practices",id:"commit-best-practices",level:3},{value:"Step 5: Pre-submission Checks",id:"step-5-pre-submission-checks",level:2},{value:"Automated Checks",id:"automated-checks",level:3},{value:"Manual Review",id:"manual-review",level:3},{value:"Step 6: Submit Pull Request",id:"step-6-submit-pull-request",level:2},{value:"Push Your Branch",id:"push-your-branch",level:3},{value:"Create Pull Request",id:"create-pull-request",level:3},{value:"Pull Request Template",id:"pull-request-template",level:3},{value:"Title and Description Guidelines",id:"title-and-description-guidelines",level:3},{value:"Title Format",id:"title-format",level:4},{value:"Description Content",id:"description-content",level:4},{value:"Step 7: Review Process",id:"step-7-review-process",level:2},{value:"What to Expect",id:"what-to-expect",level:3},{value:"Addressing Feedback",id:"addressing-feedback",level:3},{value:"Common Review Comments",id:"common-review-comments",level:4},{value:"Responding to Feedback",id:"responding-to-feedback",level:4},{value:"Review Etiquette",id:"review-etiquette",level:4},{value:"Continuous Integration",id:"continuous-integration",level:3},{value:"Step 8: After Merge",id:"step-8-after-merge",level:2},{value:"Cleanup",id:"cleanup",level:3},{value:"Follow-up Tasks",id:"follow-up-tasks",level:3},{value:"Special Considerations",id:"special-considerations",level:2},{value:"Breaking Changes",id:"breaking-changes",level:3},{value:"Large Features",id:"large-features",level:3},{value:"Security Fixes",id:"security-fixes",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"PR Cannot Be Merged",id:"pr-cannot-be-merged",level:4},{value:"Tests Failing",id:"tests-failing",level:4},{value:"Merge Conflicts",id:"merge-conflicts",level:4},{value:"Resources",id:"resources",level:2},{value:"Getting Help",id:"getting-help",level:2},{value:"For Contributors",id:"for-contributors",level:3},{value:"For Maintainers",id:"for-maintainers",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"pull-request-process",children:"Pull Request Process"})}),"\n",(0,t.jsx)(n.p,{children:"This guide covers the complete pull request workflow for contributing to TrainLoop Evals, from preparation to merge."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"TrainLoop Evals follows a structured pull request process to ensure code quality, maintainability, and consistency across the project. All changes must go through this process before being merged."}),"\n",(0,t.jsx)(n.h2,{id:"before-you-start",children:"Before You Start"}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","You have a GitHub account and have forked the repository"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","You have set up your local development environment (",(0,t.jsx)(n.a,{href:"/development/local-development",children:"Local Development"}),")"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","You have read the ",(0,t.jsx)(n.a,{href:"/development/contributing",children:"Contributing Guide"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","You understand the ",(0,t.jsx)(n.a,{href:"/development/code-style",children:"Code Style"})," guidelines"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"choose-your-contribution-type",children:"Choose Your Contribution Type"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bug Fix"})," - Fixes a specific issue or bug"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Feature Addition"})," - Adds new functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enhancement"})," - Improves existing functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"})," - Updates or improves documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Refactoring"})," - Improves code structure without changing functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"})," - Optimizes code for better performance"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-1-planning",children:"Step 1: Planning"}),"\n",(0,t.jsx)(n.h3,{id:"for-bug-fixes",children:"For Bug Fixes"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check existing issues"})," to see if the bug is already reported"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reproduce the bug"})," locally and document steps"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Identify the root cause"})," before implementing a fix"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consider edge cases"})," that might be affected"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"for-new-features",children:"For New Features"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Open a feature request"})," issue first to discuss the approach"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Wait for maintainer approval"})," before starting implementation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Break down large features"})," into smaller, manageable chunks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consider backwards compatibility"})," and migration paths"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"for-documentation",children:"For Documentation"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check for existing documentation"})," on the same topic"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Follow the documentation style guide"})," (Google Developer Style Guide principles)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Include practical examples"})," where relevant"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update related documentation"})," as needed"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-2-preparation",children:"Step 2: Preparation"}),"\n",(0,t.jsx)(n.h3,{id:"create-a-feature-branch",children:"Create a Feature Branch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Sync with upstream\ngit checkout main\ngit pull upstream main\n\n# Create feature branch\ngit checkout -b feature/descriptive-name\n\n# Or for bug fixes\ngit checkout -b fix/issue-description\n\n# Or for documentation\ngit checkout -b docs/topic-name\n"})}),"\n",(0,t.jsx)(n.h3,{id:"branch-naming-conventions",children:"Branch Naming Conventions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"feature/"})," - New features"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fix/"})," - Bug fixes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"docs/"})," - Documentation changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"refactor/"})," - Code refactoring"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"perf/"})," - Performance improvements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"test/"})," - Test additions or improvements"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Examples:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"feature/add-custom-metrics-support"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"fix/cli-config-loading-error"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"docs/update-sdk-installation-guide"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"refactor/simplify-event-processing"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-3-development",children:"Step 3: Development"}),"\n",(0,t.jsx)(n.h3,{id:"code-quality-checklist",children:"Code Quality Checklist"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Follow code style guidelines"})," (",(0,t.jsx)(n.a,{href:"/development/code-style",children:"Code Style"}),")"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Write comprehensive tests"})," for new functionality"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Update existing tests"})," if behavior changes"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Add documentation"})," for user-facing changes"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Consider backwards compatibility"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Optimize for performance"})," where relevant"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"testing-requirements",children:"Testing Requirements"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run relevant tests during development\ntask test:unit      # Fast unit tests\ntask test:cli       # CLI-specific tests\ntask test:sdk       # SDK-specific tests\n\n# Run full test suite before submitting\ntask test\n"})}),"\n",(0,t.jsx)(n.h3,{id:"documentation-updates",children:"Documentation Updates"}),"\n",(0,t.jsx)(n.p,{children:"For user-facing changes:"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Update relevant documentation in ",(0,t.jsx)(n.code,{children:"docs/docs/"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add code examples to demonstrate usage"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Update API documentation if applicable"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add changelog entry if significant change"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-4-commit-your-changes",children:"Step 4: Commit Your Changes"}),"\n",(0,t.jsx)(n.h3,{id:"commit-message-format",children:"Commit Message Format"}),"\n",(0,t.jsx)(n.p,{children:"Use conventional commit format:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"<type>(<scope>): <description>\n\n[optional body]\n\n[optional footer]\n"})}),"\n",(0,t.jsx)(n.h4,{id:"types",children:"Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"feat"})," - New feature"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fix"})," - Bug fix"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"docs"})," - Documentation changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"style"})," - Code style changes (no functional changes)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"refactor"})," - Code refactoring"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"test"})," - Adding or updating tests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"perf"})," - Performance improvements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ci"})," - CI/CD changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"build"})," - Build system changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chore"})," - Maintenance tasks"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"scopes",children:"Scopes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cli"})," - CLI-related changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sdk"})," - SDK-related changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ui"})," - Studio UI changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"registry"})," - Registry system changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"docs"})," - Documentation changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tests"})," - Test-related changes"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Good commit messages\ngit commit -m "feat(cli): add benchmark command for model comparison"\ngit commit -m "fix(sdk): resolve memory leak in event buffering"\ngit commit -m "docs(guides): add comprehensive testing guide"\ngit commit -m "refactor(ui): simplify dashboard data loading logic"\n\n# Include breaking changes\ngit commit -m "feat(cli): redesign config file format\n\nBREAKING CHANGE: Config file format has changed from YAML to TOML.\nMigration guide available in docs/migration/v2.md"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"commit-best-practices",children:"Commit Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Make atomic commits"})," - Each commit should represent a single logical change"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Write descriptive messages"})," - Explain what and why, not just what"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keep commits focused"})," - Don't mix unrelated changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test each commit"})," - Each commit should pass tests independently"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-5-pre-submission-checks",children:"Step 5: Pre-submission Checks"}),"\n",(0,t.jsx)(n.h3,{id:"automated-checks",children:"Automated Checks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Format code\ncd cli && poetry run black .\ncd sdk/python && poetry run black .\ncd sdk/typescript && npm run format\n\n# Lint code\ncd cli && poetry run flake8 .\ncd ui && npm run lint\n\n# Run tests\ntask test\n\n# Check for common issues\ntask check:mocks\n"})}),"\n",(0,t.jsx)(n.h3,{id:"manual-review",children:"Manual Review"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Review your changes"})," - Use ",(0,t.jsx)(n.code,{children:"git diff"})," to check all modifications"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Test manually"})," - Verify functionality works as expected"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Check documentation"})," - Ensure all docs are accurate and complete"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Verify backwards compatibility"})," - Test with existing configurations"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Review for security issues"})," - Check for potential vulnerabilities"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-6-submit-pull-request",children:"Step 6: Submit Pull Request"}),"\n",(0,t.jsx)(n.h3,{id:"push-your-branch",children:"Push Your Branch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Push to your fork\ngit push origin feature/your-feature-name\n\n# Or set upstream for future pushes\ngit push -u origin feature/your-feature-name\n"})}),"\n",(0,t.jsx)(n.h3,{id:"create-pull-request",children:"Create Pull Request"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Navigate to GitHub"}),' and click "New Pull Request"']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Select your branch"})," as the source"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Choose the target branch"})," (usually ",(0,t.jsx)(n.code,{children:"main"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fill out the PR template"})," completely"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"pull-request-template",children:"Pull Request Template"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"## Description\n\nBrief description of the changes made.\n\n## Type of Change\n\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] Documentation update\n- [ ] Performance improvement\n- [ ] Code refactoring\n\n## Testing\n\n- [ ] Unit tests pass\n- [ ] Integration tests pass\n- [ ] Manual testing completed\n- [ ] Performance impact assessed\n\n## Documentation\n\n- [ ] Documentation updated\n- [ ] API documentation updated (if applicable)\n- [ ] Examples added/updated\n- [ ] Migration guide provided (if breaking change)\n\n## Checklist\n\n- [ ] My code follows the project's style guidelines\n- [ ] I have performed a self-review of my own code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally with my changes\n- [ ] Any dependent changes have been merged and published\n\n## Related Issues\n\nCloses #123\nRelated to #456\n\n## Screenshots (if applicable)\n\n[Add screenshots for UI changes]\n\n## Additional Notes\n\n[Any additional information or context]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"title-and-description-guidelines",children:"Title and Description Guidelines"}),"\n",(0,t.jsx)(n.h4,{id:"title-format",children:"Title Format"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use clear, descriptive titles"}),"\n",(0,t.jsx)(n.li,{children:"Start with conventional commit type"}),"\n",(0,t.jsx)(n.li,{children:"Keep under 72 characters"}),"\n",(0,t.jsx)(n.li,{children:"Use imperative mood"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Examples:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"feat(cli): add benchmark command for model comparison"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"fix(sdk): resolve Python 3.9 compatibility issue"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"docs: add comprehensive contributing guide"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"description-content",children:"Description Content"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"What"}),": Describe what changes were made"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Why"}),": Explain the motivation behind the changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"How"}),": Briefly describe the approach taken"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Impact"}),": Note any breaking changes or performance implications"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-7-review-process",children:"Step 7: Review Process"}),"\n",(0,t.jsx)(n.h3,{id:"what-to-expect",children:"What to Expect"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automated checks"})," will run (CI/CD pipeline)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maintainer review"})," will be assigned"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Feedback and discussion"})," may occur"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Changes may be requested"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Final approval"})," and merge"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"addressing-feedback",children:"Addressing Feedback"}),"\n",(0,t.jsx)(n.h4,{id:"common-review-comments",children:"Common Review Comments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code style issues"})," - Fix formatting and linting issues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test coverage"})," - Add missing tests or improve existing ones"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"})," - Update or add missing documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance concerns"})," - Optimize critical paths"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Breaking changes"})," - Provide migration path or reconsider approach"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"responding-to-feedback",children:"Responding to Feedback"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Make requested changes\n# ... edit files ...\n\n# Commit changes\ngit add .\ngit commit -m "address review feedback: add missing tests"\n\n# Push updates\ngit push origin feature/your-feature-name\n'})}),"\n",(0,t.jsx)(n.h4,{id:"review-etiquette",children:"Review Etiquette"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Be responsive"})," - Address feedback promptly"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Be open to suggestions"})," - Maintainers know the codebase well"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ask questions"})," - If feedback is unclear, ask for clarification"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stay professional"})," - Keep discussions focused on the code"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,t.jsx)(n.p,{children:"All PRs must pass:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unit tests"})," - All existing and new tests must pass"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Integration tests"})," - End-to-end functionality must work"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code quality checks"})," - Linting and formatting must pass"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security scans"})," - No security vulnerabilities introduced"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance regression"})," - No significant performance degradation"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-8-after-merge",children:"Step 8: After Merge"}),"\n",(0,t.jsx)(n.h3,{id:"cleanup",children:"Cleanup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Switch to main branch\ngit checkout main\n\n# Pull latest changes\ngit pull upstream main\n\n# Delete feature branch\ngit branch -d feature/your-feature-name\n\n# Delete remote branch\ngit push origin --delete feature/your-feature-name\n"})}),"\n",(0,t.jsx)(n.h3,{id:"follow-up-tasks",children:"Follow-up Tasks"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Monitor for issues"})," - Watch for any problems after merge"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Update documentation"})," - If follow-up docs are needed"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Close related issues"})," - Link and close any related GitHub issues"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Share the change"})," - Announce significant features to the community"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"special-considerations",children:"Special Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"breaking-changes",children:"Breaking Changes"}),"\n",(0,t.jsx)(n.p,{children:"For changes that break backwards compatibility:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Discuss with maintainers"})," before implementing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Provide migration guide"})," in the PR description"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update version appropriately"})," (major version bump)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deprecate old functionality"})," before removing (if possible)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document breaking changes"})," in changelog"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"large-features",children:"Large Features"}),"\n",(0,t.jsx)(n.p,{children:"For significant features:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Break into smaller PRs"})," when possible"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create feature branch"})," for coordination"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use draft PRs"})," for work-in-progress"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Coordinate with maintainers"})," for timing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consider feature flags"})," for gradual rollout"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"security-fixes",children:"Security Fixes"}),"\n",(0,t.jsx)(n.p,{children:"For security-related changes:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Report security issues privately"})," first"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Coordinate with maintainers"})," on disclosure"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Follow security disclosure process"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Test security fixes thoroughly"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update security documentation"})," if needed"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsx)(n.h4,{id:"pr-cannot-be-merged",children:"PR Cannot Be Merged"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Sync with upstream\ngit checkout main\ngit pull upstream main\n\n# Rebase feature branch\ngit checkout feature/your-feature-name\ngit rebase main\n\n# Force push (if needed)\ngit push --force-with-lease origin feature/your-feature-name\n"})}),"\n",(0,t.jsx)(n.h4,{id:"tests-failing",children:"Tests Failing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Run tests locally\ntask test\n\n# Check specific failures\npytest tests/failing_test.py -v\n\n# Fix issues and commit\ngit add .\ngit commit -m "fix failing tests"\ngit push origin feature/your-feature-name\n'})}),"\n",(0,t.jsx)(n.h4,{id:"merge-conflicts",children:"Merge Conflicts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Rebase to resolve conflicts\ngit checkout feature/your-feature-name\ngit rebase main\n\n# Resolve conflicts manually\n# Edit conflicted files\ngit add resolved_file.py\ngit rebase --continue\n\n# Push resolved changes\ngit push --force-with-lease origin feature/your-feature-name\n"})}),"\n",(0,t.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/development/contributing",children:"Contributing Guide"})})," - General contribution guidelines"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/development/code-style",children:"Code Style"})})," - Coding standards and conventions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/development/testing",children:"Testing Guide"})})," - Testing requirements and practices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/development/local-development",children:"Local Development"})})," - Development environment setup"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/development/architecture",children:"Architecture Guide"})})," - System architecture overview"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,t.jsx)(n.h3,{id:"for-contributors",children:"For Contributors"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Questions about the process"}),": Open a ",(0,t.jsx)(n.a,{href:"https://github.com/trainloop/evals/discussions",children:"GitHub Discussion"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Technical questions"}),": Comment on your PR or open an issue"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Urgent issues"}),": Tag maintainers in your PR"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"for-maintainers",children:"For Maintainers"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Release process"}),": ",(0,t.jsx)(n.a,{href:"/development/release-process",children:"Release Process"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Thank you for contributing to TrainLoop Evals! Following this process helps ensure high-quality, maintainable code that benefits the entire community."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);