"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[921],{547:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"reference/cli/overview","title":"CLI Overview","description":"The TrainLoop CLI provides four main commands for managing your evaluation workflow. This page provides a comprehensive reference for all CLI commands and options.","source":"@site/docs/reference/cli/overview.md","sourceDirName":"reference/cli","slug":"/reference/cli/overview","permalink":"/evals/reference/cli/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/TrainLoop/evals/tree/main/docs/docs/reference/cli/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"CLI Reference","permalink":"/evals/category/cli-reference"},"next":{"title":"Reference","permalink":"/evals/reference/"}}');var o=i(4848),r=i(8453);const l={sidebar_position:1},t="CLI Overview",c={},a=[{value:"Core Commands",id:"core-commands",level:2},{value:"<code>trainloop init</code>",id:"trainloop-init",level:3},{value:"<code>trainloop eval</code>",id:"trainloop-eval",level:3},{value:"<code>trainloop add</code>",id:"trainloop-add",level:3},{value:"<code>trainloop studio</code>",id:"trainloop-studio",level:3},{value:"Global Options",id:"global-options",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Config File Discovery",id:"config-file-discovery",level:3},{value:"Exit Codes",id:"exit-codes",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Getting Help",id:"getting-help",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"cli-overview",children:"CLI Overview"})}),"\n",(0,o.jsx)(n.p,{children:"The TrainLoop CLI provides four main commands for managing your evaluation workflow. This page provides a comprehensive reference for all CLI commands and options."}),"\n",(0,o.jsx)(n.h2,{id:"core-commands",children:"Core Commands"}),"\n",(0,o.jsx)(n.h3,{id:"trainloop-init",children:(0,o.jsx)(n.code,{children:"trainloop init"})}),"\n",(0,o.jsx)(n.p,{children:"Scaffolds data/ and eval/ directories, creates sample metrics and suites."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"trainloop init\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This command creates a ",(0,o.jsx)(n.code,{children:"trainloop/"})," workspace with the following structure:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"trainloop/data/"})," - Where event and result data is stored"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"trainloop/eval/"})," - Where metrics and test suites are defined"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"trainloop.config.yaml"})," - Configuration file"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"What it creates:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Sample metrics for common evaluation patterns"}),"\n",(0,o.jsx)(n.li,{children:"Example test suites demonstrating best practices"}),"\n",(0,o.jsx)(n.li,{children:"Configuration file with sensible defaults"}),"\n",(0,o.jsx)(n.li,{children:"Directory structure for organizing evaluation data"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["See the ",(0,o.jsx)(n.a,{href:"../../../getting-started/quick-start.md#project-initialization",children:"scaffold template documentation"})," for more details."]}),"\n",(0,o.jsx)(n.h3,{id:"trainloop-eval",children:(0,o.jsx)(n.code,{children:"trainloop eval"})}),"\n",(0,o.jsxs)(n.p,{children:["Discovers suites, applies metrics to new events, and appends verdicts to ",(0,o.jsx)(n.code,{children:"data/results/"}),". If the LLM judge is used, it automatically consolidates all trace events for the run into a single timestamped JSONL file in ",(0,o.jsx)(n.code,{children:"trainloop/data/judge_traces/"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"trainloop eval [OPTIONS]\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Options:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--suite <suite_name>"})," - Run only the specified suite instead of all suites"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--config <path>"})," - Path to trainloop config file (overrides auto-discovery)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--data-folder <path>"})," - Override data folder location"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--verbose"})," - Enable verbose output for debugging"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Run all evaluation suites\ntrainloop eval\n\n# Run only a specific suite\ntrainloop eval --suite my_test_suite\n\n# Use custom config file\ntrainloop eval --config /path/to/custom.yaml\n\n# Run with verbose output\ntrainloop eval --verbose\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Discovers all Python modules in ",(0,o.jsx)(n.code,{children:"trainloop/eval/"})]}),"\n",(0,o.jsx)(n.li,{children:"Identifies metrics and test suites"}),"\n",(0,o.jsxs)(n.li,{children:["Reads new events from ",(0,o.jsx)(n.code,{children:"trainloop/data/events/"})]}),"\n",(0,o.jsx)(n.li,{children:"Applies metrics to events"}),"\n",(0,o.jsxs)(n.li,{children:["Saves results to ",(0,o.jsx)(n.code,{children:"trainloop/data/results/"})]}),"\n",(0,o.jsxs)(n.li,{children:["If LLM judge is used, saves traces to ",(0,o.jsx)(n.code,{children:"trainloop/data/judge_traces/"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"trainloop-add",children:(0,o.jsx)(n.code,{children:"trainloop add"})}),"\n",(0,o.jsxs)(n.p,{children:["Adds pre-built metrics and suites from the TrainLoop registry to your project. Components are defined with Python-based ",(0,o.jsx)(n.code,{children:"config.py"})," files for type safety and dynamic discovery."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"trainloop add [metric|suite] [NAME] [OPTIONS]\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Options:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--list"})," - List available metrics and/or suites"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--registry <path>"})," - Use a local directory as the registry (for development)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--force"})," - Overwrite existing files without prompting"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# List all available metrics and suites\ntrainloop add --list\n\n# List available metrics\ntrainloop add metric --list\n\n# List available suites  \ntrainloop add suite --list\n\n# Add a specific metric\ntrainloop add metric always_pass\n\n# Add a specific suite\ntrainloop add suite basic_qa\n\n# Add a metric from a local registry path\ntrainloop add --registry ../my-local-registry metric custom_metric\n\n# Force overwrite existing files\ntrainloop add metric response_quality --force\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Registry Structure:"}),"\nThe registry contains reusable components:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Metrics"}),": Individual evaluation functions"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Suites"}),": Collections of metrics for specific use cases"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Utilities"}),": Helper functions and common patterns"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"trainloop-studio",children:(0,o.jsx)(n.code,{children:"trainloop studio"})}),"\n",(0,o.jsx)(n.p,{children:"Launches the TrainLoop Studio UI for visualizing and analyzing your evaluation data."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"trainloop studio [OPTIONS]\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Options:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--config <path>"})," - Path to the trainloop config file (overrides auto-discovery)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--local <path>"})," - Path to a local studio tar file (for development)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--port <number>"})," - Port to run the server on (default: 3000)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--host <address>"})," - Host address to bind to (default: localhost)"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Launch studio with auto-discovery (default behavior)\ntrainloop studio\n\n# Use a custom config file\ntrainloop studio --config /alt/path/to/trainloop.config.yaml\n\n# Run on a different port\ntrainloop studio --port 8080\n\n# Use a local development build of Studio\ntrainloop studio --local /path/to/your/trainloop-studio-runner.tgz\n\n# Combine options\ntrainloop studio --config /custom/config.yaml --port 8080\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Features:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Interactive data visualization with DuckDB"}),"\n",(0,o.jsx)(n.li,{children:"Event timeline and result analysis"}),"\n",(0,o.jsx)(n.li,{children:"Metric performance tracking"}),"\n",(0,o.jsx)(n.li,{children:"Benchmark comparison views"}),"\n",(0,o.jsx)(n.li,{children:"Export capabilities for further analysis"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"global-options",children:"Global Options"}),"\n",(0,o.jsx)(n.p,{children:"These options work with all commands:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--help"})," - Show help information"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--version"})," - Show version information"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--quiet"})," - Suppress non-essential output"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--config <path>"})," - Specify config file location"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"TRAINLOOP_DATA_FOLDER"})," - Override default data folder location"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"TRAINLOOP_CONFIG_PATH"})," - Override default config file location"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"TRAINLOOP_LOG_LEVEL"})," - Set logging level (DEBUG, INFO, WARNING, ERROR)"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"config-file-discovery",children:"Config File Discovery"}),"\n",(0,o.jsx)(n.p,{children:"The CLI automatically discovers config files in this order:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--config"})," command line argument"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"TRAINLOOP_CONFIG_PATH"})," environment variable"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"trainloop.config.yaml"})," in current directory"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"trainloop/trainloop.config.yaml"})," in current directory"]}),"\n",(0,o.jsxs)(n.li,{children:["Search parent directories for ",(0,o.jsx)(n.code,{children:"trainloop.config.yaml"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"exit-codes",children:"Exit Codes"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"0"})," - Success"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"1"})," - General error"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"2"})," - Configuration error"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"3"})," - Data error (missing events, invalid format)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"4"})," - Evaluation error (metric failures)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"5"})," - Network error (registry, LLM API)"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Config file not found:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Verify config file location\ntrainloop eval --config /path/to/config.yaml --verbose\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"No events to evaluate:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check data folder contents\nls trainloop/data/events/\n\n# Verify environment variable\necho $TRAINLOOP_DATA_FOLDER\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Module import errors:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Run from project root\ncd /path/to/your/project\ntrainloop eval\n\n# Check Python path\npython -c "import sys; print(sys.path)"\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Studio won't start:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check port availability\ntrainloop studio --port 8080\n\n# Use local build for development\ntrainloop studio --local /path/to/studio.tgz\n"})}),"\n",(0,o.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,o.jsx)(n.p,{children:"Enable debug output for troubleshooting:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Set log level\nexport TRAINLOOP_LOG_LEVEL=DEBUG\ntrainloop eval --verbose\n\n# Or use config file\ntrainloop eval --config debug.yaml --verbose\n"})}),"\n",(0,o.jsx)(n.h3,{id:"getting-help",children:"Getting Help"}),"\n",(0,o.jsx)(n.p,{children:"For more help:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.code,{children:"trainloop <command> --help"})," for command-specific help"]}),"\n",(0,o.jsxs)(n.li,{children:["Check the ",(0,o.jsx)(n.a,{href:"../../guides/debugging.md",children:"troubleshooting guide"})]}),"\n",(0,o.jsxs)(n.li,{children:["Visit ",(0,o.jsx)(n.a,{href:"https://github.com/TrainLoop/trainloop-evals/discussions",children:"GitHub Discussions"})]}),"\n",(0,o.jsxs)(n.li,{children:["Open an issue on ",(0,o.jsx)(n.a,{href:"https://github.com/TrainLoop/trainloop-evals/issues",children:"GitHub"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>t});var s=i(6540);const o={},r=s.createContext(o);function l(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);