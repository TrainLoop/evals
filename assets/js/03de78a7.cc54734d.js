"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3924],{1772:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"development/code-style","title":"Code Style Guide","description":"This guide defines the coding standards and conventions used across the TrainLoop Evals project. Following these guidelines ensures consistency, readability, and maintainability.","source":"@site/docs/development/code-style.md","sourceDirName":"development","slug":"/development/code-style","permalink":"/development/code-style","draft":false,"unlisted":false,"editUrl":"https://github.com/trainloop/evals/tree/main/docs/docs/development/code-style.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Building from Source","permalink":"/development/building-from-source"},"next":{"title":"Contributing Guide","permalink":"/development/contributing"}}');var s=i(4848),o=i(8453);const r={},a="Code Style Guide",l={},c=[{value:"General Principles",id:"general-principles",level:2},{value:"Code Quality Standards",id:"code-quality-standards",level:3},{value:"File Organization",id:"file-organization",level:3},{value:"Language-Specific Guidelines",id:"language-specific-guidelines",level:2},{value:"Python",id:"python",level:3},{value:"Code Formatting",id:"code-formatting",level:4},{value:"Linting",id:"linting",level:4},{value:"Import Organization",id:"import-organization",level:4},{value:"Type Hints",id:"type-hints",level:4},{value:"Function and Class Conventions",id:"function-and-class-conventions",level:4},{value:"Error Handling",id:"error-handling",level:4},{value:"TypeScript",id:"typescript",level:3},{value:"Code Formatting",id:"code-formatting-1",level:4},{value:"Type Definitions",id:"type-definitions",level:4},{value:"React Component Conventions",id:"react-component-conventions",level:4},{value:"Go",id:"go",level:3},{value:"Code Formatting",id:"code-formatting-2",level:4},{value:"Package Organization",id:"package-organization",level:4},{value:"Documentation Standards",id:"documentation-standards",level:2},{value:"Docstrings and Comments",id:"docstrings-and-comments",level:3},{value:"Python Docstrings",id:"python-docstrings",level:4},{value:"TypeScript JSDoc",id:"typescript-jsdoc",level:4},{value:"Go Comments",id:"go-comments",level:4},{value:"Code Comments",id:"code-comments",level:3},{value:"Testing Standards",id:"testing-standards",level:2},{value:"Test Organization",id:"test-organization",level:3},{value:"Test Naming",id:"test-naming",level:3},{value:"Performance Guidelines",id:"performance-guidelines",level:2},{value:"Python Performance",id:"python-performance",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Security Guidelines",id:"security-guidelines",level:2},{value:"Input Validation",id:"input-validation",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Version Control",id:"version-control",level:2},{value:"Commit Messages",id:"commit-messages",level:3},{value:"Branch Management",id:"branch-management",level:3},{value:"Tools and Automation",id:"tools-and-automation",level:2},{value:"Pre-commit Hooks",id:"pre-commit-hooks",level:3},{value:"IDE Configuration",id:"ide-configuration",level:3},{value:"VS Code Settings",id:"vs-code-settings",level:4},{value:"Best Practices Summary",id:"best-practices-summary",level:2},{value:"Do&#39;s",id:"dos",level:3},{value:"Don&#39;ts",id:"donts",level:3},{value:"Code Review Checklist",id:"code-review-checklist",level:2},{value:"Resources",id:"resources",level:2},{value:"Getting Help",id:"getting-help",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"code-style-guide",children:"Code Style Guide"})}),"\n",(0,s.jsx)(n.p,{children:"This guide defines the coding standards and conventions used across the TrainLoop Evals project. Following these guidelines ensures consistency, readability, and maintainability."}),"\n",(0,s.jsx)(n.h2,{id:"general-principles",children:"General Principles"}),"\n",(0,s.jsx)(n.h3,{id:"code-quality-standards",children:"Code Quality Standards"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Readability First"})," - Code is read 10\xd7 more than it's written"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistency"})," - Follow established patterns throughout the codebase"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simplicity"})," - Prefer simple, clear solutions over complex ones"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Single Responsibility"})," - Each function/class should have one reason to change"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"DRY (Don't Repeat Yourself)"})," - Avoid code duplication"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"YAGNI (You Aren't Gonna Need It)"})," - Don't build features until needed"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"file-organization",children:"File Organization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use clear, descriptive file and directory names"}),"\n",(0,s.jsx)(n.li,{children:"Group related functionality together"}),"\n",(0,s.jsx)(n.li,{children:"Keep file lengths reasonable (< 500 lines for most files)"}),"\n",(0,s.jsx)(n.li,{children:"Use consistent file naming conventions"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"language-specific-guidelines",children:"Language-Specific Guidelines"}),"\n",(0,s.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.p,{children:"TrainLoop Evals uses Python 3.9+ with modern Python conventions."}),"\n",(0,s.jsx)(n.h4,{id:"code-formatting",children:"Code Formatting"}),"\n",(0,s.jsxs)(n.p,{children:["We use ",(0,s.jsx)(n.strong,{children:"Black"})," for code formatting with the following configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:"# pyproject.toml\n[tool.black]\nline-length = 88\ntarget-version = ['py39']\ninclude = '\\.pyi?$'\nextend-exclude = '''\n/(\n  # directories\n  __pycache__\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | _build\n  | buck-out\n  | build\n  | dist\n)/\n'''\n"})}),"\n",(0,s.jsx)(n.h4,{id:"linting",children:"Linting"}),"\n",(0,s.jsxs)(n.p,{children:["We use ",(0,s.jsx)(n.strong,{children:"flake8"})," for linting with these rules:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ini",children:"# .flake8\n[flake8]\nmax-line-length = 88\nextend-ignore = E203, E266, E501, W503\nmax-complexity = 10\nexclude = .git,__pycache__,dist,build,.venv\n"})}),"\n",(0,s.jsx)(n.h4,{id:"import-organization",children:"Import Organization"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.strong,{children:"isort"})," for import sorting:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Standard library imports\nimport os\nimport sys\nfrom pathlib import Path\n\n# Third-party imports\nimport click\nimport yaml\nfrom pydantic import BaseModel\n\n# Local application imports\nfrom trainloop_cli.commands.utils import load_config\nfrom trainloop_cli.eval_core.types import EvalResult\n"})}),"\n",(0,s.jsx)(n.h4,{id:"type-hints",children:"Type Hints"}),"\n",(0,s.jsx)(n.p,{children:"Use type hints for all public functions and complex private functions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from typing import Dict, List, Optional, Union\nfrom pathlib import Path\n\ndef load_config(config_path: Path) -> Dict[str, Union[str, int, bool]]:\n    """Load configuration from YAML file.\n    \n    Args:\n        config_path: Path to configuration file\n        \n    Returns:\n        Dictionary containing configuration values\n        \n    Raises:\n        FileNotFoundError: If config file doesn\'t exist\n        yaml.YAMLError: If config file is malformed\n    """\n    if not config_path.exists():\n        raise FileNotFoundError(f"Config file not found: {config_path}")\n    \n    with open(config_path, \'r\') as f:\n        return yaml.safe_load(f)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"function-and-class-conventions",children:"Function and Class Conventions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Good: Clear function names with type hints\ndef calculate_metrics(events: List[Dict], suite_name: str) -> EvalResult:\n    """Calculate evaluation metrics for a suite of events."""\n    pass\n\n# Good: Class naming with clear purpose\nclass MetricsCalculator:\n    """Handles calculation of evaluation metrics."""\n    \n    def __init__(self, config: Dict[str, Any]) -> None:\n        self.config = config\n        self._cache: Dict[str, Any] = {}\n    \n    def calculate(self, events: List[Dict]) -> EvalResult:\n        """Calculate metrics for the given events."""\n        pass\n\n# Good: Use dataclasses for data structures\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass\nclass EvalConfig:\n    """Configuration for evaluation runs."""\n    suite_name: str\n    data_folder: Path\n    output_format: str = "jsonl"\n    max_workers: int = 4\n    timeout: Optional[int] = None\n'})}),"\n",(0,s.jsx)(n.h4,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Good: Specific exception handling\ntry:\n    config = load_config(config_path)\nexcept FileNotFoundError:\n    logger.error(f"Config file not found: {config_path}")\n    raise\nexcept yaml.YAMLError as e:\n    logger.error(f"Invalid YAML in config file: {e}")\n    raise\n\n# Good: Custom exceptions for domain-specific errors\nclass EvaluationError(Exception):\n    """Base exception for evaluation-related errors."""\n    pass\n\nclass MetricNotFoundError(EvaluationError):\n    """Raised when a requested metric is not available."""\n    pass\n'})}),"\n",(0,s.jsx)(n.h3,{id:"typescript",children:"TypeScript"}),"\n",(0,s.jsx)(n.p,{children:"For the TypeScript SDK and UI components, we follow modern TypeScript conventions."}),"\n",(0,s.jsx)(n.h4,{id:"code-formatting-1",children:"Code Formatting"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.strong,{children:"Prettier"})," with these settings:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// .prettierrc\n{\n  "semi": true,\n  "trailingComma": "es5",\n  "singleQuote": true,\n  "printWidth": 80,\n  "tabWidth": 2,\n  "useTabs": false\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"type-definitions",children:"Type Definitions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Good: Use interfaces for object shapes\ninterface LLMEvent {\n  id: string;\n  timestamp: number;\n  provider: string;\n  model: string;\n  prompt: string;\n  response: string;\n  metadata?: Record<string, unknown>;\n}\n\n// Good: Use union types for known values\ntype LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\n// Good: Use generic types for reusable functions\nfunction processEvents<T extends LLMEvent>(\n  events: T[],\n  processor: (event: T) => T\n): T[] {\n  return events.map(processor);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"react-component-conventions",children:"React Component Conventions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Good: Functional components with TypeScript\nimport React from 'react';\n\ninterface DashboardProps {\n  title: string;\n  events: LLMEvent[];\n  onEventSelect?: (event: LLMEvent) => void;\n}\n\nexport const Dashboard: React.FC<DashboardProps> = ({\n  title,\n  events,\n  onEventSelect,\n}) => {\n  return (\n    <div className=\"dashboard\">\n      <h1>{title}</h1>\n      {events.map((event) => (\n        <div key={event.id} onClick={() => onEventSelect?.(event)}>\n          {event.provider}: {event.model}\n        </div>\n      ))}\n    </div>\n  );\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"go",children:"Go"}),"\n",(0,s.jsx)(n.p,{children:"For the Go SDK, we follow standard Go conventions."}),"\n",(0,s.jsx)(n.h4,{id:"code-formatting-2",children:"Code Formatting"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"gofmt"})," and ",(0,s.jsx)(n.code,{children:"goimports"})," for formatting:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Format all Go files\ngo fmt ./...\n\n# Organize imports\ngoimports -w .\n"})}),"\n",(0,s.jsx)(n.h4,{id:"package-organization",children:"Package Organization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// Good: Clear package documentation\n// Package instrumentation provides HTTP instrumentation for TrainLoop logging.\npackage instrumentation\n\nimport (\n    "context"\n    "net/http"\n    "time"\n)\n\n// Good: Exported types with documentation\ntype Config struct {\n    DataFolder string `json:"data_folder"`\n    FlushInterval time.Duration `json:"flush_interval"`\n}\n\n// Good: Interface definitions\ntype HTTPClient interface {\n    Do(req *http.Request) (*http.Response, error)\n}\n\n// Good: Factory functions\nfunc NewInstrumentedClient(client HTTPClient, config Config) HTTPClient {\n    return &instrumentedClient{\n        client: client,\n        config: config,\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"documentation-standards",children:"Documentation Standards"}),"\n",(0,s.jsx)(n.h3,{id:"docstrings-and-comments",children:"Docstrings and Comments"}),"\n",(0,s.jsx)(n.h4,{id:"python-docstrings",children:"Python Docstrings"}),"\n",(0,s.jsx)(n.p,{children:"Use Google-style docstrings:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def evaluate_suite(\n    suite_name: str,\n    events: List[Dict],\n    config: EvalConfig\n) -> EvalResult:\n    """Evaluate a suite of events against configured metrics.\n    \n    This function loads the specified evaluation suite and applies\n    all configured metrics to the provided events.\n    \n    Args:\n        suite_name: Name of the evaluation suite to run\n        events: List of LLM events to evaluate\n        config: Evaluation configuration\n        \n    Returns:\n        EvalResult containing metrics and verdicts\n        \n    Raises:\n        SuiteNotFoundError: If the specified suite doesn\'t exist\n        MetricError: If any metric fails to execute\n        \n    Example:\n        >>> config = EvalConfig(suite_name="basic", data_folder=Path("./data"))\n        >>> events = load_events("events.jsonl")\n        >>> result = evaluate_suite("basic", events, config)\n        >>> print(f"Passed: {result.passed}/{result.total}")\n    """\n'})}),"\n",(0,s.jsx)(n.h4,{id:"typescript-jsdoc",children:"TypeScript JSDoc"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"/**\n * Collects and logs LLM events for evaluation.\n * \n * @param config - Configuration object for data collection\n * @param options - Optional parameters for collection behavior\n * @returns Promise that resolves when collection is initialized\n * \n * @example\n * ```typescript\n * await collect({\n *   dataFolder: './data',\n *   flushInterval: 5000\n * });\n * ```\n */\nexport async function collect(\n  config: CollectionConfig,\n  options?: CollectionOptions\n): Promise<void> {\n  // Implementation\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"go-comments",children:"Go Comments"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// Config represents the configuration for TrainLoop logging.\n// It contains settings for data storage, flush intervals, and other\n// operational parameters.\ntype Config struct {\n    // DataFolder is the directory where event data will be stored\n    DataFolder string `json:"data_folder"`\n    \n    // FlushInterval determines how often buffered events are written\n    FlushInterval time.Duration `json:"flush_interval"`\n}\n\n// NewConfig creates a new Config instance with default values.\n// The default data folder is "./data" and flush interval is 10 seconds.\nfunc NewConfig() *Config {\n    return &Config{\n        DataFolder:    "./data",\n        FlushInterval: 10 * time.Second,\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"code-comments",children:"Code Comments"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Good: Explain why, not what\ndef calculate_score(responses: List[str]) -> float:\n    # Use harmonic mean to penalize inconsistent responses more heavily\n    # than arithmetic mean would\n    scores = [rate_response(r) for r in responses]\n    return len(scores) / sum(1/s for s in scores if s > 0)\n\n# Good: Explain complex algorithms\ndef find_optimal_threshold(metrics: List[float]) -> float:\n    """Find the optimal threshold using Otsu\'s method."""\n    # Implementation of Otsu\'s method for automatic threshold selection\n    # This maximizes the between-class variance while minimizing within-class variance\n    histogram = create_histogram(metrics)\n    # ... rest of implementation\n'})}),"\n",(0,s.jsx)(n.h2,{id:"testing-standards",children:"Testing Standards"}),"\n",(0,s.jsx)(n.h3,{id:"test-organization",children:"Test Organization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Good: Clear test structure\nclass TestMetricsCalculator:\n    """Test suite for MetricsCalculator."""\n    \n    def setup_method(self):\n        """Set up test fixtures."""\n        self.calculator = MetricsCalculator(config={"timeout": 30})\n        self.sample_events = [\n            {"id": "1", "prompt": "Hello", "response": "Hi there"},\n            {"id": "2", "prompt": "Goodbye", "response": "See you later"}\n        ]\n    \n    def test_calculate_with_valid_events(self):\n        """Test calculation with valid event data."""\n        result = self.calculator.calculate(self.sample_events)\n        \n        assert result.total == 2\n        assert result.passed >= 0\n        assert result.failed >= 0\n        assert result.passed + result.failed == result.total\n    \n    @pytest.mark.integration\n    def test_calculate_with_llm_judge(self):\n        """Test calculation using LLM judge integration."""\n        # Integration test logic\n        pass\n'})}),"\n",(0,s.jsx)(n.h3,{id:"test-naming",children:"Test Naming"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use descriptive test names: ",(0,s.jsx)(n.code,{children:"test_calculate_score_with_empty_responses"})]}),"\n",(0,s.jsxs)(n.li,{children:["Group related tests in classes: ",(0,s.jsx)(n.code,{children:"TestMetricsCalculator"})]}),"\n",(0,s.jsxs)(n.li,{children:["Use appropriate markers: ",(0,s.jsx)(n.code,{children:"@pytest.mark.unit"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"performance-guidelines",children:"Performance Guidelines"}),"\n",(0,s.jsx)(n.h3,{id:"python-performance",children:"Python Performance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Good: Use list comprehensions for simple transformations\nfiltered_events = [e for e in events if e.get("score", 0) > 0.5]\n\n# Good: Use generator expressions for large datasets\ntotal_score = sum(e.get("score", 0) for e in events)\n\n# Good: Use dataclasses for structured data\n@dataclass\nclass CachedResult:\n    result: EvalResult\n    timestamp: float\n    \n# Good: Use proper caching\nfrom functools import lru_cache\n\n@lru_cache(maxsize=128)\ndef expensive_calculation(event_id: str) -> float:\n    # Expensive calculation here\n    pass\n'})}),"\n",(0,s.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Good: Use context managers for resource cleanup\ndef process_large_file(file_path: Path) -> Iterator[Dict]:\n    """Process large JSONL file with streaming."""\n    with open(file_path, \'r\') as f:\n        for line in f:\n            yield json.loads(line)\n\n# Good: Use generators for large datasets\ndef load_events_streaming(data_folder: Path) -> Iterator[Dict]:\n    """Load events from multiple files without loading all into memory."""\n    for file_path in data_folder.glob("*.jsonl"):\n        yield from process_large_file(file_path)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"security-guidelines",children:"Security Guidelines"}),"\n",(0,s.jsx)(n.h3,{id:"input-validation",children:"Input Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Good: Validate input parameters\ndef load_config(config_path: Path) -> Dict[str, Any]:\n    """Load configuration from file with validation."""\n    if not config_path.exists():\n        raise FileNotFoundError(f"Config file not found: {config_path}")\n    \n    if not config_path.is_file():\n        raise ValueError(f"Config path is not a file: {config_path}")\n    \n    # Validate file size (prevent DoS)\n    max_size = 10 * 1024 * 1024  # 10MB\n    if config_path.stat().st_size > max_size:\n        raise ValueError(f"Config file too large: {config_path}")\n    \n    with open(config_path, \'r\') as f:\n        return yaml.safe_load(f)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Good: Use environment variables safely\nimport os\nfrom pathlib import Path\n\ndef get_data_folder() -> Path:\n    """Get data folder from environment or config."""\n    data_folder = os.getenv("TRAINLOOP_DATA_FOLDER")\n    if not data_folder:\n        raise ValueError("TRAINLOOP_DATA_FOLDER environment variable not set")\n    \n    path = Path(data_folder).expanduser().resolve()\n    if not path.exists():\n        path.mkdir(parents=True, exist_ok=True)\n    \n    return path\n'})}),"\n",(0,s.jsx)(n.h2,{id:"version-control",children:"Version Control"}),"\n",(0,s.jsx)(n.h3,{id:"commit-messages",children:"Commit Messages"}),"\n",(0,s.jsx)(n.p,{children:"Use conventional commit format:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"feat(cli): add benchmark command for model comparison\n\nAdd a new benchmark command that allows users to compare different\nLLM models across evaluation metrics. The command supports multiple\nproviders and generates comparison reports.\n\n- Add benchmark command with provider configuration\n- Implement parallel model evaluation\n- Add comparison report generation\n- Include performance metrics and cost analysis\n\nCloses #123\n"})}),"\n",(0,s.jsx)(n.h3,{id:"branch-management",children:"Branch Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Good: Descriptive branch names\ngit checkout -b feature/add-benchmark-command\ngit checkout -b fix/config-loading-error\ngit checkout -b docs/update-installation-guide\n\n# Good: Keep branches focused\n# One feature or fix per branch\n# Regular rebasing to keep history clean\n"})}),"\n",(0,s.jsx)(n.h2,{id:"tools-and-automation",children:"Tools and Automation"}),"\n",(0,s.jsx)(n.h3,{id:"pre-commit-hooks",children:"Pre-commit Hooks"}),"\n",(0,s.jsx)(n.p,{children:"Set up pre-commit hooks to enforce code quality:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/psf/black\n    rev: 23.1.0\n    hooks:\n      - id: black\n        language_version: python3.9\n\n  - repo: https://github.com/pycqa/flake8\n    rev: 6.0.0\n    hooks:\n      - id: flake8\n\n  - repo: https://github.com/pycqa/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ide-configuration",children:"IDE Configuration"}),"\n",(0,s.jsx)(n.h4,{id:"vs-code-settings",children:"VS Code Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "python.formatting.provider": "black",\n  "python.linting.enabled": true,\n  "python.linting.flake8Enabled": true,\n  "python.linting.mypyEnabled": true,\n  "editor.formatOnSave": true,\n  "editor.codeActionsOnSave": {\n    "source.organizeImports": true\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,s.jsx)(n.h3,{id:"dos",children:"Do's"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Use descriptive names for variables, functions, and classes"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Write comprehensive docstrings for public APIs"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Add type hints to improve code clarity"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Use consistent formatting tools (Black, Prettier, gofmt)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Write tests for all new functionality"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Handle errors gracefully with appropriate exceptions"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Use logging for debugging and monitoring"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Follow the principle of least surprise"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Keep functions small and focused"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Use version control effectively"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"donts",children:"Don'ts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u274c Don't use magic numbers or hardcoded values"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Don't ignore error conditions"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Don't write overly complex functions"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Don't duplicate code across the codebase"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Don't commit code without running tests"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Don't use global variables unless absolutely necessary"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Don't write code without documentation"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Don't ignore linting warnings"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Don't use deprecated APIs"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Don't commit sensitive information"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"code-review-checklist",children:"Code Review Checklist"}),"\n",(0,s.jsx)(n.p,{children:"When reviewing code, check for:"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Functionality"})," - Does the code do what it's supposed to do?"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Style"})," - Does the code follow the style guidelines?"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Testing"})," - Are there adequate tests for the new functionality?"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Documentation"})," - Is the code properly documented?"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Performance"})," - Are there any obvious performance issues?"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Security"})," - Are there any security vulnerabilities?"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Maintainability"})," - Is the code easy to understand and modify?"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Error Handling"})," - Are errors handled appropriately?"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Edge Cases"})," - Are edge cases considered and handled?"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Backwards Compatibility"})," - Are breaking changes justified and documented?"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/development/contributing",children:"Contributing Guide"})})," - General contribution guidelines"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/development/testing",children:"Testing Guide"})})," - Testing standards and practices"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/development/pull-request-process",children:"Pull Request Process"})})," - Code review workflow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/development/local-development",children:"Local Development"})})," - Development environment setup"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,s.jsx)(n.p,{children:"If you have questions about code style or need clarification on any guidelines:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Open a discussion"})," on ",(0,s.jsx)(n.a,{href:"https://github.com/trainloop/evals/discussions",children:"GitHub Discussions"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ask in your pull request"})," if you're unsure about specific changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check existing code"})," in the repository for examples"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Refer to language-specific style guides"})," for detailed formatting rules"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Following these guidelines helps maintain a high-quality, consistent codebase that's easy for everyone to understand and contribute to."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);