"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4648],{401:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"reference/cli/config","title":"Configuration","description":"TrainLoop CLI configuration file format and options.","source":"@site/docs/reference/cli/config.md","sourceDirName":"reference/cli","slug":"/reference/cli/config","permalink":"/reference/cli/config","draft":false,"unlisted":false,"editUrl":"https://github.com/trainloop/evals/tree/main/docs/docs/reference/cli/config.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"docsSidebar","previous":{"title":"trainloop benchmark","permalink":"/reference/cli/benchmark"},"next":{"title":"Environment Variables","permalink":"/reference/cli/env-vars"}}');var r=i(4848),a=i(8453);const t={sidebar_position:7},l="Configuration",c={},s=[{value:"Configuration File",id:"configuration-file",level:2},{value:"Configuration Discovery",id:"configuration-discovery",level:2},{value:"Complete Configuration Reference",id:"complete-configuration-reference",level:2},{value:"Environment-Specific Configurations",id:"environment-specific-configurations",level:2},{value:"Development",id:"development",level:3},{value:"Production",id:"production",level:3},{value:"CI/CD",id:"cicd",level:3},{value:"Configuration Validation",id:"configuration-validation",level:2},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Environment-Specific Files",id:"1-environment-specific-files",level:3},{value:"2. Sensitive Data",id:"2-sensitive-data",level:3},{value:"3. Version Control",id:"3-version-control",level:3},{value:"See Also",id:"see-also",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,r.jsx)(e.p,{children:"TrainLoop CLI configuration file format and options."}),"\n",(0,r.jsx)(e.h2,{id:"configuration-file",children:"Configuration File"}),"\n",(0,r.jsxs)(e.p,{children:["TrainLoop uses ",(0,r.jsx)(e.code,{children:"trainloop.config.yaml"})," for configuration. A minimal configuration looks like:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# trainloop.config.yaml\ntrainloop:\n  data_folder: "./data"\n  project: "my-evals"\n'})}),"\n",(0,r.jsx)(e.h2,{id:"configuration-discovery",children:"Configuration Discovery"}),"\n",(0,r.jsx)(e.p,{children:"The CLI searches for configuration files in this order:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"--config"})," command line argument"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"TRAINLOOP_CONFIG_FILE"})," environment variable"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"trainloop.config.yaml"})," in current directory"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"trainloop/trainloop.config.yaml"})," in current directory"]}),"\n",(0,r.jsx)(e.li,{children:"Same search repeated in parent directories (up to git root)"}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"~/.trainloop/config.yaml"})," in home directory"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Values in files found later override those found earlier."}),"\n",(0,r.jsx)(e.h2,{id:"complete-configuration-reference",children:"Complete Configuration Reference"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'trainloop:\n  # Basic settings\n  project: "my-project"\n  data_folder: "./data"\n  log_level: "info"  # debug, info, warn, error\n  \n  # Data retention (days)\n  data_retention:\n    events: 30\n    results: 90\n    judge_traces: 7\n  \n  # Performance settings\n  performance:\n    batch_size: 1000\n    max_concurrent_evaluations: 10\n    evaluation_timeout: 300\n    cache_enabled: true\n  \n  # LLM Judge configuration\n  judge:\n    models:\n      - openai/gpt-4o-mini\n      - anthropic/claude-3-haiku-20240307\n    calls_per_model_per_claim: 2\n    temperature: 0.1\n    max_tokens: 100\n    timeout: 30\n    \n  # Benchmarking configuration\n  benchmark:\n    providers:\n      - provider: openai\n        model: gpt-4o\n        temperature: 0.7\n        max_tokens: 1000\n      - provider: openai\n        model: gpt-4o-mini\n        temperature: 0.7\n        max_tokens: 1000\n      - provider: anthropic\n        model: claude-3-5-sonnet-20241022\n        temperature: 0.7\n        max_tokens: 1000\n    \n    # Optional benchmark settings\n    max_samples: 1000\n    parallel_requests: 5\n    timeout: 30\n    cost_limit: 50.00\n    \n  # Studio UI configuration\n  studio:\n    port: 3000\n    host: "localhost"\n    auto_refresh: true\n    theme: "light"  # light, dark, auto\n    \n  # Monitoring and alerting\n  monitoring:\n    enabled: false\n    metrics_endpoint: "http://localhost:9090"\n    alert_threshold: 0.7\n    \n  # Security settings\n  security:\n    encrypt_events: false\n    anonymize_data: false\n    retention_policy: "standard"\n'})}),"\n",(0,r.jsx)(e.h2,{id:"environment-specific-configurations",children:"Environment-Specific Configurations"}),"\n",(0,r.jsx)(e.h3,{id:"development",children:"Development"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# trainloop.config.yaml (development)\ntrainloop:\n  data_folder: "./dev-data"\n  log_level: "debug"\n  \n  judge:\n    models:\n      - openai/gpt-4o-mini  # Cheaper for development\n    calls_per_model_per_claim: 1\n    \n  benchmark:\n    max_samples: 10  # Small samples for testing\n    parallel_requests: 2\n'})}),"\n",(0,r.jsx)(e.h3,{id:"production",children:"Production"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# trainloop.config.yaml (production)\ntrainloop:\n  data_folder: "/var/lib/trainloop/data"\n  log_level: "info"\n  \n  data_retention:\n    events: 90\n    results: 365\n    \n  performance:\n    batch_size: 5000\n    max_concurrent_evaluations: 20\n    \n  judge:\n    models:\n      - openai/gpt-4o\n      - anthropic/claude-3-5-sonnet-20241022\n    calls_per_model_per_claim: 3\n    \n  monitoring:\n    enabled: true\n    metrics_endpoint: "http://prometheus:9090"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"cicd",children:"CI/CD"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# ci.config.yaml\ntrainloop:\n  data_folder: "/tmp/trainloop-ci"\n  log_level: "warn"\n  \n  judge:\n    models:\n      - openai/gpt-4o-mini\n    calls_per_model_per_claim: 1\n    timeout: 15\n    \n  benchmark:\n    max_samples: 50\n    parallel_requests: 3\n    timeout: 10\n'})}),"\n",(0,r.jsx)(e.h2,{id:"configuration-validation",children:"Configuration Validation"}),"\n",(0,r.jsx)(e.p,{children:"Validate your configuration:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Check configuration\ntrainloop config --validate\n\n# Show current configuration\ntrainloop config --show\n\n# Show configuration sources\ntrainloop config --show-sources\n"})}),"\n",(0,r.jsx)(e.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,r.jsx)(e.p,{children:"Override configuration with environment variables:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'# Override data folder\nexport TRAINLOOP_DATA_FOLDER="/custom/data/path"\n\n# Override log level\nexport TRAINLOOP_LOG_LEVEL="debug"\n\n# Override judge models\nexport TRAINLOOP_JUDGE_MODELS="openai/gpt-4o-mini,anthropic/claude-3-haiku"\n'})}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(e.h3,{id:"1-environment-specific-files",children:"1. Environment-Specific Files"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Use different configs for different environments\ntrainloop eval --config production.config.yaml\ntrainloop eval --config development.config.yaml\ntrainloop eval --config ci.config.yaml\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2-sensitive-data",children:"2. Sensitive Data"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# Don't put API keys in config files\n# Use environment variables instead\ntrainloop:\n  judge:\n    models:\n      - openai/gpt-4o\n    # API keys from environment: OPENAI_API_KEY\n"})}),"\n",(0,r.jsx)(e.h3,{id:"3-version-control",children:"3. Version Control"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'# Include in version control\ngit add trainloop.config.yaml\n\n# But exclude environment-specific ones\necho "*.local.config.yaml" >> .gitignore\n'})}),"\n",(0,r.jsx)(e.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/reference/cli/env-vars",children:"Environment Variables"})," - Environment variable reference"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/explanation/concepts/architecture",children:"Architecture"})," - How configuration fits into the system"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/tutorials/production-setup",children:"Production Setup"})," - Production configuration examples"]}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>l});var o=i(6540);const r={},a=o.createContext(r);function t(n){const e=o.useContext(a);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),o.createElement(a.Provider,{value:e},n.children)}}}]);